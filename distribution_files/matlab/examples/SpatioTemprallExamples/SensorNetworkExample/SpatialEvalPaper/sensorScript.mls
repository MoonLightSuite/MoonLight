signal { int nodeType; real battery; real temperature; }
space { edges { int hop; real dist; } }
domain boolean;
formula atom = (nodeType==3) ;
formula P1 = atom reach (hop)[0, 1] (nodeType==2 | nodeType==1);
formula P1pam (int k) = atom reach (hop)[0, k] ( nodeType== 1) ;
formula P2 = escape(hop)[5, inf] (battery > 0.5) ;
formula P3 = somewhere(hop)[0, 3] (battery > 0.5) ;
formula P4 = (nodeType==3) reach (hop)[0, 1]{(nodeType==2) reach (hop)[0, 5] (nodeType==1)};
formula Pnest = everywhere(dist)[0, inf]P3;
formula ReachQ = (temperature > 10)reach(hop)[0, 10] (battery > 0.5);
formula SensNetk = somewhere(hop)[0, 3] (battery > 0.5);
formula SensBool = everywhere(hop)[0, 5] (nodeType==2);
formula Pbattery = !atom => {!atom reach (hop)[0, 2] (battery > 0.5)};
formula P5 = (battery > 0.5) ;
formula PT1 = globally P4
formula PT2 = eventually[0,5]P3

