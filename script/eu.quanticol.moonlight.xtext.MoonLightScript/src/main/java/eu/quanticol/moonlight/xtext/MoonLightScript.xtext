grammar eu.quanticol.moonlight.xtext.MoonLightScript with org.eclipse.xtext.common.Terminals

generate moonLightScript "http://www.quanticol.eu/moonlight/xtext/MoonLightScript"

Model: {Model}
	(elements += Element)*;

Element:
	Monitor	|
	TypeDefinition //| 
//	FunctionDefinition | 
//	SemiringDefinition 
//	|
//	DistanceDomainDefinition 
;

//DistanceDomainDefinition:
//	'distance' name=ID '{' 
//		'type' type=BasicType ';' 
//		'zero' min=Expression ';' 
//		'sum' sum=DomainOperator ';' 
//		'order' order=RelationOperator ';'
//	'}'
//;

//SemiringDefinition:
//	'semiring' name=ID '{' 
//		'type' type=BasicType ';' 
//		'bottom'  bottom=Expression  ';' 
//		'top' top=Expression ';' 
//		'choice' choice=[DomainOperator] ';' 
//		'combine' combine=[FunctionDefinition] ';'
//		'negation' negation=[FunctionDefinition] 
//	'}' 
//;

//DomainOperator: 
//	{PlusOperator} '+'
//	| {MinusOperator} '-'
//	| {MultiplicationOperator} '*'
//	| {MinOpertor} 'min'
//	| {MaxOperator} 'max'
//	| {NegationOperator} '!'
//	| {CongiunctionOperator} '&'
//	| {DisjunctionOperator} '|'
//	| {CustomOperator} function=[FunctionDefinition]
//;
//
//RelationOperator: 
//	{LessRelation} '<'
//	| {LessOrEqualRelation} '<='
//	| {EqualRelation} '=='
//	| {GreaterRelation} '>'
//	| {GreaterOrEqualRelation} '>='
//	| {CustomRelation} function=[FunctionDefinition]
//;

//FunctionDefinition:
//	'function' name=ID '(' (args+=VariableDeclaration (',' args+=VariableDeclaration)*)? ')' body=FunctionCommandBlock
//;
//
//FunctionCommand:
//	IfThenElseCommand
//	| VariableDeclarationStatement
//	| VariableAssignment
//	| ReturnStatement
//	| MatchCommand
//;
//
//MatchCommand:
//	'match' value=Expression 'with' cases += MatchCase ('|' cases += MatchCase)*
//;
//
//MatchCase:
//	'case' value=Expression caseBlock=FunctionCommandBlock
//;
//
//ReturnStatement:
//	'return' value=Expression ';'
//;
//
//VariableAssignment:
//	variable=[VariableDeclaration] '=' value=Expression ';'
//;
//
//VariableDeclarationStatement:
//	VariableDeclaration ('=' value=Expression) ';'
//;

VariableDeclaration: 
	type=BasicType name=ID
;

//IfThenElseCommand:
//	'if' '(' guard=Expression ')' thenBlock=FunctionCommandBlock elseBlock=FunctionCommandBlock
//;
//
//FunctionCommandBlock: {FunctionCommandBlock}
//	'{'
//		(commands += FunctionCommand)*
//	'}'
//;

TypeDefinition:
	'type' name=ID '=' elements += TypeElement ('|' elements += TypeElement )* ';'
;

TypeElement:
	name=ID
;


Monitor:
	'monitor' name=ID ('(' parameters += VariableDeclaration ( ',' parameters += VariableDeclaration)* ')')? '{'
		'signal' '{' 
			(signalVariables += VariableDeclaration ';')+
		'}'
		
		(isSpatial ?= 'space' '{' 
			('locations' '{' (locationVariables += VariableDeclaration ';')+ '}')?
			('edges' '{' (edgeVariables += VariableDeclaration ';')+ '}')
		 '}'
		)?
		'domain' semiring=SemiringExpression ';'
		'formula' formula=StrelFormula ';'
		('where'   
			(subformulas += FormulaDeclaration ';')*
		)?
	'}'
;

FormulaDeclaration:
	name=ID '=' formula=StrelFormula ';'
;

SemiringExpression:
//	{TropicalSemiring} 'tropical' |
	 {MinMaxSemiring} 'minmax'
	| {BooleanSemiring} 'boolean'
//	| {PairSemiring} '<' left=SemiringExpression ',' right=SemiringExpression '>'
//	| {SemiringReference} semiring=[SemiringDefinition]
;

Expression:
	OrExpression
;

OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} '|' right=AndExpression)*
;

AndExpression returns Expression:
	RelationExpression ({AndExpression.left=current} '&' right=RelationExpression)*
;

RelationExpression returns Expression:
	PlusOrMinusExpression ({RelationExpression.left=current}  op=('<'|'>'|'<='|'>='|'==') right=PlusOrMinusExpression)?
;

PlusOrMinusExpression returns Expression:
	ModuloExpression (
		({PlusExpression.left=current} '+'|{MinusExpression.left=current} '-') 
		right=ModuloExpression
	)*
;

ModuloExpression returns Expression:
	MulOrDivExpression ({ModuloExpression.left=current} '%' right=MulOrDivExpression)?
;

MulOrDivExpression returns Expression:
	BasicExpression (
		{MulOrDivExpression.left=current} op=('*'|'/') 
		right=BasicExpression
	)*
;

ReferenceableElement:
	VariableDeclaration//|TypeElement
;

BasicExpression returns Expression:
	{TrueLiteral} 'true'
	| {FalseLiteral} 'false'
	| {NumberLiteral} integerPart=INT (isDecimal ?= '.' decimalPart=INT)?
	| {NotExpression} '!' argument=BasicExpression
	| {UnaryPlusExpression} '+' argument=BasicExpression
	| {UnaryMinusExpression} '-' argument=BasicExpression
	| {InfiniteLiteral} 'INF'
	| '(' Expression ({IfThenElseExpression.guard=current} '?' thenCase=BasicExpression ':' elseCase=BasicExpression)? ')'
	| {ReferencedValue} reference=[VariableDeclaration]
//	| {TupleExpression} '<' elements += BasicExpression (',' elements += BasicExpression)+ '>'
;

StrelFormula:
	StrelOrFormula
;

StrelOrFormula returns StrelFormula:
	StrelAndFormula ({StrelOrFormula.left=current} '|' right=StrelAndFormula)*	
;

StrelAndFormula returns StrelFormula:
	StrelBinarySpatioTemporalFormula ({StrelAndFormula.left=current} '&' right=StrelBinarySpatioTemporalFormula)*
;

StrelBinarySpatioTemporalFormula returns StrelFormula:
	StrelBasicFormula (
		{StrelUntilFormula.left=current} 'until' (interval=Interval)? right=StrelBasicFormula
		| {StrelSinceFormula.left=current} 'since' (interval=Interval)? right=StrelBasicFormula
//		| {StrelReachFormula.left=current} 'reach' ('['distance=[DistanceDomainDefinition]']')? ('(' distanceExpression=Expression ')')? internal=Interval right=StrelBasicFormula
		| {StrelReachFormula.left=current} 'reach' ('(' distanceExpression=Expression ')')? interval=Interval right=StrelBasicFormula
	)?
;

Interval:
	'[' from=Expression ',' to=Expression ']'
;

StrelBasicFormula returns StrelFormula:
	{StrelAtomicFormula} '#[' atomic=Expression ']#'
//	| {StrelEscapeFormula} 'escape' ('['distance=[DistanceDomainDefinition]']')? ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
	| {StrelEscapeFormula} 'escape' ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
	| {StrelEventuallyFormula} 'eventually' (interval=Interval)? argument=StrelBasicFormula
	| {StrelAlwaysFormula} 'globally' (interval=Interval)? argument=StrelBasicFormula
	| {StrelOnceFormula} 'once' (interval=Interval)? argument=StrelBasicFormula
	| {StrelHistoricallyFormula} 'historically' (interval=Interval)? argument=StrelBasicFormula
	| {StrelNotFormula} '!' argument=StrelBasicFormula
//	| {StrelSomewhereFormula} 'somewhere' ('['distance=[DistanceDomainDefinition]']')? ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
	| {StrelSomewhereFormula} 'somewhere' ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
//	| {StrelEverywhereFormula} 'everywhere' ('['distance=[DistanceDomainDefinition]']')? ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula	
	| {StrelEverywhereFormula} 'everywhere' ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula	
//	| {StrelNextFormula} 'next' ('['distance=[DistanceDomainDefinition]']')? ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
	| {StrelNextFormula} 'next' ('(' distanceExpression=Expression ')')? interval=Interval argument=StrelBasicFormula
	| '{' StrelFormula '}'
	| {StrelFormulaReference} reference=[FormulaDeclaration]
;



SignalType:
	RecordType
;

RecordType:
	'[' vars += SignalVariable (',' vars += SignalVariable )* ']'
;

SignalVariable:
	name=ID ':' type=BasicType
;

BasicType:
	{IntegerType} 'int'
	| {RealType} 'real'
	| {BooleanType} 'bool'
	| {TypeReference} type=[TypeDefinition]
;
	
