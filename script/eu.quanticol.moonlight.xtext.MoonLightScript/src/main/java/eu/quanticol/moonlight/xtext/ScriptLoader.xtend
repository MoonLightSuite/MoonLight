/*
 * generated by Xtext 2.18.0.M3
 */
package eu.quanticol.moonlight.xtext

import com.google.inject.Inject
import com.google.inject.Provider
import eu.quanticol.moonlight.xtext.MoonLightScriptStandaloneSetup
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import eu.quanticol.moonlight.MoonLightScript
import org.eclipse.xtext.resource.XtextResourceSet
import java.io.ByteArrayInputStream
import eu.quanticol.moonlight.xtext.moonLightScript.Model
import eu.quanticol.moonlight.compiler.MoonlightCompiler
import org.eclipse.xtext.resource.XtextResource
import eu.quanticol.moonlight.xtext.generator.ScriptToJava
import java.io.IOException

class ScriptLoader {
	
	MoonlightCompiler compiler
	
	new() throws IOException {
		this(new MoonlightCompiler());
	}
	
	new( MoonlightCompiler compiler ) {
		this.compiler = compiler;
		
	}
	
	def static loadScriptFromCode( String code ) {

	}
	
	def static loadScriptFromFile( String file ) {
		
	}
	

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
			issues.forEach[System.err.println(it)]
			return
		}

		// Configure and start the generator
		fileAccess.outputPath = 'src-gen/'
		val context = new GeneratorContext => [
			cancelIndicator = CancelIndicator.NullImpl
		]
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
	}
	
	def MoonLightScript compileScript( String code ) {
		return compileScript("moonlight.script","GeneratedScriptClass",code);
	}

	def generateCodeFromString( String packageName, String className, String code ) {
		val injector = new MoonLightScriptStandaloneSetup().createInjectorAndDoEMFRegistration
		val resourceSet = injector.getInstance(typeof(XtextResourceSet))
		resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE)
		val resource = resourceSet.createResource(URI.createURI("dummy:/example.mls"));
		val in = new ByteArrayInputStream(code.getBytes());
		resource.load(in, resourceSet.getLoadOptions());
		return generateCode(packageName, className, resource)
	}

	def generateCodeFromFile( String packageName, String className, String filePath ) {
		val injector = new MoonLightScriptStandaloneSetup().createInjectorAndDoEMFRegistration
		val resourceSet = injector.getInstance(typeof(XtextResourceSet))
		resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE)
		val resource = resourceSet.getResource(URI.createFileURI(filePath),true);
		return generateCode(packageName, className, resource)
	}
	
	def generateCode(String packageName, String className, Resource resource) {
		val scriptToJava = new ScriptToJava();		
		val generatedCode = scriptToJava.getJavaCode(resource.contents.get(0) as Model,packageName,className)
		return generatedCode		
	}
	
	def MoonLightScript compileScript( String packageName, String className, String code ) {
		val generatedCode = generateCodeFromString(packageName,className,code)
		return compileAndLoad( packageName, className, generatedCode.toString )
	}

	def compileAndLoad( String packageName, String className, String javaCode ) {
		return compiler.getIstance(packageName,className,javaCode,typeof(MoonLightScript))		
	}
	
	def compile( String packageName, String className, String javaCode ) {
		compiler.compile(packageName,className,javaCode)		
	}

	def MoonLightScript loadFile( String packageName, String className, String filePath ) {
		val generatedCode = generateCodeFromFile(packageName,className,filePath)
		return compileAndLoad( packageName, className, generatedCode.toString )
	}

	
	def MoonLightScript loadFile( String filePath ) {
		return loadFile("moonlight.script","GeneratedScriptClass",filePath)
	}

	def generateJavaClassesFromCode( String code  ) {
		generateJavaClassesFromCode("moonlight.script","GeneratedScriptClass",code)
	}	
	
	def generateJavaClassesFromCode( String packageName, String className, String code  ) {
		val generatedCode = generateCodeFromString(packageName,className,code)
		compile( packageName, className, generatedCode.toString )
	}
	
	def generateJavaClassesFromFile( String filePath  ) {
		generateJavaClassesFromFile("moonlight.script","GeneratedScriptClass",filePath)
	}	
	
	def generateJavaClassesFromFile( String packageName, String className, String filePath  ) {
		val generatedCode = generateCodeFromFile(packageName,className,filePath)
		compile( packageName, className, generatedCode.toString )
	}
	
}
