/*
 * generated by Xtext 2.18.0.M3
 */
package eu.quanticol.moonlight.xtext

import com.google.inject.Inject
import com.google.inject.Provider
import eu.quanticol.moonlight.xtext.MoonLightScriptStandaloneSetup
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import eu.quanticol.moonlight.MoonLightScript
import org.eclipse.xtext.resource.XtextResourceSet
import java.io.ByteArrayInputStream
import eu.quanticol.moonlight.xtext.moonLightScript.Model
import eu.quanticol.moonlight.compiler.MoonlightCompiler
import org.eclipse.xtext.resource.XtextResource
import eu.quanticol.moonlight.xtext.generator.ScriptToJava

class ScriptLoader {
	
	
	def static loadScriptFromCode( String code ) {

	}
	
	def static loadScriptFromFile( String file ) {
		
	}
	

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
			issues.forEach[System.err.println(it)]
			return
		}

		// Configure and start the generator
		fileAccess.outputPath = 'src-gen/'
		val context = new GeneratorContext => [
			cancelIndicator = CancelIndicator.NullImpl
		]
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
	}
	
	def MoonLightScript compileScript( String code ) {
		val injector = new MoonLightScriptStandaloneSetup().createInjectorAndDoEMFRegistration
		val resourceSet = injector.getInstance(typeof(XtextResourceSet))
		resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE)
		val resource = resourceSet.createResource(URI.createURI("dummy:/example.mls"));
		val in = new ByteArrayInputStream(code.getBytes());
		resource.load(in, resourceSet.getLoadOptions());
		val scriptToJava = new ScriptToJava();		
		val generatedCode = scriptToJava.getJavaCode(resource.contents.get(0) as Model,"moonlight.script","GeneratedScriptClass")
		val comp = new MoonlightCompiler();
		val script = comp.getIstance("moonlight.script","GeneratedScriptClass",generatedCode.toString,typeof(MoonLightScript))		
		return script;
	}
	
	def MoonLightScript loadFile( String filePath ) {
		val injector = new MoonLightScriptStandaloneSetup().createInjectorAndDoEMFRegistration
		val resourceSet = injector.getInstance(typeof(XtextResourceSet))
		resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE)
		val resource = resourceSet.getResource(URI.createFileURI(filePath),true);
		val scriptToJava = new ScriptToJava();		
		val generatedCode = scriptToJava.getJavaCode(resource.contents.get(0) as Model,"moonlight.script","GeneratedScriptClass")
		val comp = new MoonlightCompiler();
		val script = comp.getIstance("moonlight.script","GeneratedScriptClass",generatedCode.toString,typeof(MoonLightScript))		
		return script;
	}
	
}
