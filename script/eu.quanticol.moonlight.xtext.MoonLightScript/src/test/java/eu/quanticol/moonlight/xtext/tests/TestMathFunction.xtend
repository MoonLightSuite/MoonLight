/*
 * generated by Xtext 2.18.0.M3
 */
package eu.quanticol.moonlight.xtext.tests

import com.google.inject.Inject
import eu.quanticol.moonlight.xtext.moonLightScript.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.^extension.ExtendWith
import eu.quanticol.moonlight.xtext.generator.ScriptToJava
import eu.quanticol.moonlight.compiler.MoonlightCompiler
import eu.quanticol.moonlight.MoonLightScript


@ExtendWith(InjectionExtension)
@InjectWith(MoonLightScriptInjectorProvider)
class TestMathFunction {
  @Inject
  ParseHelper<Model> parseHelper

  @Test
  	def void generateJavaCode() {
  		val result = parseHelper.parse('''
                signal { real x; real y; }
                domain minmax;
                formula mainFormula = ( x+y > 0 );
                formula testAbs = ( abs(x) > 0);
                formula testACos = ( acos(x) > 0);
                formula testASin = ( asin(x) > 0);
                formula testATan = ( atan(x) > 0);
                formula testCbrt = ( cbrt(x) > 0);
                formula testCeil = ( ceil(x) > 0);
                formula testCos = ( cos(x) > 0);
                formula testCosh = ( cosh(x) > 0);
                formula testExp = ( exp(x) > 0);
                formula testExpm1 = ( expm1(x) > 0);
                formula testFloor = ( floor(x) > 0);
                formula testGetExponent = ( getExponent(x) > 0);
                formula testLog = ( log(x) > 0);
                formula testLog10 = ( log10(x) > 0);
                formula testLog1p = ( log1p(x) > 0);
                formula testSignum = ( signum(x) > 0);
                formula testSin = ( sin(x) > 0);
                formula testSinh = ( sinh(x) > 0);
                formula testSqrt = ( sqrt(x) > 0);
                formula testTan = ( tan(x) > 0);
                formula testAtan2 = ( atan2(x,y) > 0)
                formula testHypot = ( hypot(x,y) > 0)
                formula testMax = ( max(x,y) > 0)
                formula testMin = ( min(x,y) > 0)
                formula testPow = ( pow(x,y) > 0)
  		''')
  		val scriptToJava = new ScriptToJava();
  		val generatedCode = scriptToJava.getJavaCode(result,"moonlight.test","TestMathFunction")
  		System.out.println(generatedCode);
		val comp = new MoonlightCompiler();
		val script = comp.getIstance("moonlight.test","TestMathFunction",generatedCode.toString,typeof(MoonLightScript))
		Assertions.assertNotNull(script);

  		}

}