/*
 * generated by Xtext 2.18.0.M3
 */
package eu.quanticol.moonlight.xtext.tests

import com.google.inject.Inject
import eu.quanticol.moonlight.xtext.moonLightScript.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.^extension.ExtendWith
import eu.quanticol.moonlight.xtext.generator.ScriptToJava
import eu.quanticol.moonlight.compiler.MoonlightCompiler
import eu.quanticol.moonlight.MoonLightScript


@ExtendWith(InjectionExtension)
@InjectWith(MoonLightScriptInjectorProvider)
class TestMathFunction {
  @Inject
  ParseHelper<Model> parseHelper

  @Test
  	def void generateJavaCode() {
  		val result = parseHelper.parse('''
            monitor TestMathFunction {
                signal { real x; real y; }
                domain minmax;
                formula #[ x+y ]#;
                where 
                testAbs = #[ abs(x) ]#;
                testACos = #[ acos(x) ]#;
                testASin = #[ asin(x) ]#;
                testATan = #[ atan(x) ]#;
                testCbrt = #[ cbrt(x) ]#;
                testCeil = #[ ceil(x) ]#;
                testCos = #[ cos(x) ]#;
                testCosh = #[ cosh(x) ]#;
                testExp = #[ exp(x) ]#;
                testExpm1 = #[ expm1(x) ]#;
                testFloor = #[ floor(x) ]#;
                testGetExponent = #[ getExponent(x) ]#;
                testLog = #[ log(x) ]#;
                testLog10 = #[ log10(x) ]#;
                testLog1p = #[ log1p(x) ]#;
                testSignum = #[ signum(x) ]#;
                testSin = #[ sin(x) ]#;
                testSinh = #[ sinh(x) ]#;
                testSqrt = #[ sqrt(x) ]#;
                testTan = #[ tan(x) ]#;
                testAtan2 = #[ atan2(x,y) ]#
                testHypot = #[ hypot(x,y) ]#
                testMax = #[ max(x,y) ]#
                testMin = #[ min(x,y) ]#
                testPow = #[ pow(x,y) ]#
             }

  		''')
  		val scriptToJava = new ScriptToJava();
  		val generatedCode = scriptToJava.getJavaCode(result,"moonlight.test","TestMathFunction")
		val comp = new MoonlightCompiler();
		val script = comp.getIstance("moonlight.test","TestMathFunction",generatedCode.toString,typeof(MoonLightScript))
		Assertions.assertNotNull(script);

  		}

}