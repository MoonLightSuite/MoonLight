/*
 * generated by Xtext 2.18.0.M3
 */
package eu.quanticol.moonlight.xtext.tests

import com.google.inject.Inject
import eu.quanticol.moonlight.xtext.moonLightScript.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(MoonLightScriptInjectorProvider)
@Disabled("Disabled until bug #2019 has been fixed!")
class TestCityScript {
  @Inject
  ParseHelper<Model> parseHelper

  @Test
  def void loadModel() {
    val result = parseHelper.parse('''
      type poiType = BusStop|Hospital|MetroStop|MainSquare|Museum;

      type data = [ taxi:bool, people:int ];

      monitor City {
        signal data;
        space (poi,real);
        domain boolean;
        formula name = somewhere [0.0, 1.0] #[ taxi ]#;
        formula name =
        where:
          isThereATaxi = #[ taxi ]#;
          isThreAStop = #[ (poi==BusTop)|(poi==MetroStop) ]#;
          isThreAStop2 = #[ (poi==BusTop) ]#|#[ (poi==MetroStop) ]#;
          isHospital = #[ poi==Hospital ]#;
          isMainSquare = #[ poi==MainSquare ]#;
          fewPeople = #[ people<=2 ]#;
          maniPeople = #[ people>2 ]#;
          somewhereTaxi = somewhere [0.0, 1.0] isThereATaxi;
      }

    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
  }
}